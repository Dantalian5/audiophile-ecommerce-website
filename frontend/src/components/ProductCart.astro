---
import Button from '@components/common/Button.astro';
import Number from '@components/form/Number.astro';
const {
  productId,
  productNickname,
  title,
  subtitle,
  body,
  imgRef,
  newProductTag = false,
  price,
} = Astro.props as {
  productId: string;
  productNickname: string;
  title: string;
  subtitle: string;
  body: string;
  imgRef: string[];
  newProductTag: boolean;
  price: number;
};
---

<section class="main-padding secondary-margin-bottom product-shop">
  <div class="product-shop__img">
    <picture>
      {imgRef[2] && <source srcset={imgRef[2]} media="(min-width: 75rem)" />}
      {imgRef[1] && <source srcset={imgRef[1]} media="(min-width: 43.75rem)" />}
      <img class="product-shop__img--img" src={imgRef[0]} alt={title} />
    </picture>
  </div>
  <div class="product-shop__info">
    {newProductTag && <span class="product-shop__new">NEW PRODUCT</span>}
    <h2 class="product-shop__title">{title}<br />{subtitle}</h2>
    <p class="product-shop__body">{body}</p>
    <p class="product-shop__price">${price}</p>
    <form
      class="form-cart product-shop__cart"
      data-product-id={productId}
      data-product-nickname={productNickname}
      data-product-price={price}
      data-target="product-cart-number-selector">
      <Number />
      <Button label="add to cart" variant="accent" type="submit" />
    </form>
  </div>
</section>

<style lang="scss">
  .product-shop {
    background-color: none;
    display: flex;
    flex-direction: column;
    row-gap: 2rem;
    column-gap: 4.3438rem;
    width: 100%;
    position: relative;
    align-items: center;
    &__img {
      flex: 1 1 17.5625rem;
      &--img {
        width: 100%;
        height: 22rem;
        object-fit: cover;
        object-position: center center;
        border-radius: 8px;
        background-color: var(--secondary-ghost);
      }
    }
    &__info {
      flex: 1 1 21.1875rem;
      max-width: 35.75rem;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      justify-content: center;
    }
    &__new {
      color: var(--accent);
      font-size: 0.875rem;
      font-style: normal;
      font-weight: 400;
      line-height: normal;
      letter-spacing: 0.625rem;
      text-transform: uppercase;
      margin-bottom: 1.5rem;
    }
    &__title {
      color: var(--foreground-dark);
      font-size: 1.75rem;
      font-style: normal;
      font-weight: 700;
      line-height: normal;
      letter-spacing: 0.0625rem;
      text-transform: uppercase;
      margin-bottom: 1.5rem;
    }
    &__body {
      color: var(--foreground-dark);
      font-size: 0.9375rem;
      font-style: normal;
      font-weight: 400;
      line-height: 1.5625rem; /* 166.667% */
      opacity: 0.5;
      margin-bottom: 1.5rem;
    }
    &__price {
      color: var(--foreground-dark);
      font-size: 1.125rem;
      font-style: normal;
      font-weight: 700;
      line-height: normal;
      letter-spacing: 0.0804rem;
      text-transform: uppercase;
      margin-bottom: 2rem;
    }
    &__cart {
      display: flex;
      gap: 1rem;
      align-items: center;
      justify-content: center;
    }
  }
  @media screen and (min-width: 43.75rem) {
    .product-shop {
      flex-direction: row;
      &__img--img {
        height: 30rem;
        object-fit: contain;
      }
      &__info {
        align-items: flex-start;
      }
      &__new {
        margin-bottom: 1rem;
      }
      &__title {
        font-size: 2.5rem;
        line-height: 2.75rem; /* 110% */
        letter-spacing: 0.0893rem;
        margin-bottom: 2rem;
      }
      &__body {
        margin-bottom: 2rem;
      }
    }
  }
  @media screen and (min-width: 75rem) {
    .product-shop {
      column-gap: 7.8125rem;
      &__img {
        flex-basis: 33.75rem;
        &--img {
          height: 35rem;
        }
      }
      &__info {
        flex-basis: 27.8125rem;
      }
      &__price {
        margin-bottom: 3rem;
      }
    }
  }
</style>
<script>
  import { addToCart } from '@/lib/cartOperations';
  import { formatPriceInput } from '@/lib/utils';

  document
    .querySelectorAll('form[data-target="product-cart-number-selector"]')
    .forEach((form: HTMLFormElement) => {
      form.addEventListener('submit', (event) => {
        event.preventDefault();
        const inputNumber: HTMLInputElement =
          form.querySelector('input[type=number]');
        const productId = form.dataset.productId;
        const productNickname = form.dataset.productNickname;
        const productPrice = formatPriceInput(form.dataset.productPrice);
        const productQuantity = parseFloat(inputNumber.value);

        addToCart({
          id: productId,
          code: productId,
          nickname: productNickname,
          price: productPrice,
          quantity: productQuantity,
        });
      });
    });
</script>
