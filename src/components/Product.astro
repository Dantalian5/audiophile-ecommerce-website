---
import Button from '@components/common/Button.astro';
const {
  title = '',
  subtitle = '',
  body = '',
  imgRef = [''],
  href = '#',
  newProductTag = false,
  direction = 'leftToRight',
} = Astro.props;
---

<article class={`product ${direction}`}>
  <div class="product__img">
    <picture>
      {imgRef[2] && <source srcset={imgRef[2]} media="(min-width: 75rem)" />}
      {imgRef[1] && <source srcset={imgRef[1]} media="(min-width: 43.75rem)" />}
      <img class="product__img--img" src={imgRef[0]} alt={title} />
    </picture>
  </div>
  <div class="product__info">
    {newProductTag && <span class="product__new">NEW PRODUCT</span>}
    <h2 class="product__title">{title}<br />{subtitle}</h2>
    <p class="product__body">{body}</p>
    <Button href={href} label="See Product" variant="accent" />
  </div>
</article>

<style lang="scss">
  .product {
    overflow: hidden;
    background-color: none;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    width: 100%;
    position: relative;
    align-items: center;
    &__img,
    &__info {
      width: 100%;
      position: relative;
      opacity: 0;
      transition:
        opacity 0.5s ease-out,
        transform 0.5s ease-out;
    }
    &__img {
      &--img {
        width: 100%;
        height: 22rem;
        border-radius: 8px;
        background-color: var(--secondary-ghost);
        object-fit: cover;
        object-position: center center;
      }
    }
    &__info {
      max-width: 35.75rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      align-items: center;
      justify-content: center;
    }
    &__new {
      color: var(--accent);
      text-align: center;
      font-size: 0.875rem;
      font-style: normal;
      font-weight: 400;
      line-height: normal;
      letter-spacing: 0.625rem;
      text-transform: uppercase;
      margin-bottom: 0.5rem;
    }
    &__title {
      color: var(--foreground-dark);
      text-align: center;
      font-size: 1.75rem;
      font-style: normal;
      font-weight: 700;
      line-height: normal;
      letter-spacing: 0.0625rem;
      text-transform: uppercase;
      margin-bottom: 0.5rem;
    }
    &__body {
      color: var(--foreground-dark);
      text-align: center;
      font-size: 0.9375rem;
      font-style: normal;
      font-weight: 400;
      line-height: 1.5625rem; /* 166.667% */
      opacity: 0.5;
      margin-bottom: 0.5rem;
    }
  }
  @media screen and (min-width: 43.75rem) {
    .product {
      gap: 3.25rem;
      &__new {
        margin-bottom: 0;
      }
      &__title {
        margin-bottom: 1rem;
        font-size: 2.5rem;
        line-height: 2.75rem; /* 110% */
        letter-spacing: 0.0893rem;
      }
    }
  }
  @media screen and (min-width: 75rem) {
    .product {
      flex-direction: row;
      column-gap: 125px;
      &.rightToLeft {
        flex-direction: row-reverse;
      }
      &__img {
        flex: 1 1 33.75rem;
        &--img {
          height: auto;
        }
      }
      &__info {
        flex: 1 1 27.8125rem;
        align-items: flex-start;
        max-width: none;
      }
      &__title,
      &__body {
        text-align: left;
      }
    }
  }
  .product {
    &__img {
      transform: translateX(-100%);
    }
    &__info {
      transform: translateX(100%);
    }
  }
  .rightToLeft > .product {
    &__img {
      transform: translateX(100%);
    }
    &__info {
      transform: translateX(-100%);
    }
  }
  .in-view > .product {
    &__img {
      transform: translateX(0);
      opacity: 1;
    }
    &__info {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const targets = document.querySelectorAll('.product');

    const observer = new IntersectionObserver(
      (elements) => {
        elements.forEach((element) => {
          const target = element.target as HTMLElement;
          const boundingTop = element.boundingClientRect.top;
          const isIntersecting = element.isIntersecting;

          if (isIntersecting) {
            if (boundingTop > 0) {
              target.classList.add('in-view');
            }
          } else {
            if (boundingTop > 0) {
              target.classList.remove('in-view');
            }
          }
        });
      },
      {
        threshold: 0.1,
      }
    );

    targets.forEach((target) => {
      observer.observe(target);
    });
  });
</script>
